{"version":3,"sources":["components/Main/FeedbackSection/FeedbackWidget/FeedbackWidget.sc.ts","components/Main/FeedbackSection/FeedbackWidget/FeedbackOptions/FeedbackOptions.sc.ts","components/Main/FeedbackSection/FeedbackWidget/FeedbackOptions/FeedbackOptions.tsx","components/Main/FeedbackSection/FeedbackWidget/Statistics/Statistics.sc.ts","components/Main/FeedbackSection/FeedbackWidget/Statistics/Statistics.tsx","components/Main/FeedbackSection/FeedbackWidget/Notification/Notification.sc.tsx","components/Main/FeedbackSection/FeedbackWidget/Notification/Notification.tsx","components/Main/FeedbackSection/FeedbackWidget/FeedbackWidget.tsx","components/Main/Main.sc.tsx","components/Main/FeedbackSection/FeedbackSection.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["Feedback","styled","article","Options","div","List","ul","Item","li","Option","button","FeedbackOptions","options","onLeaveFeedback","handleVote","useCallback","currentTarget","getAttribute","map","icon","id","displayName","key","type","onClick","data-id","role","aria-label","Stats","statsList","css","ConcreteStats","SummaryStats","Statistics","good","neutral","bad","total","positivePercentage","Wrapper","Notification","message","FeedbackWidget","feedback","setFeedback","useState","fb","Object","values","reduce","a","v","countTotalFeedback","Math","round","countPositiveFeedbackPercentage","useMemo","handleLeaveFeedback","optionId","MainHeading","h1","MainSection","section","Main","main","MainSectionHeading","h2","MainSectionContent","bg","FeedbackSection","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"2sBAEO,MAAMA,EAAWC,IAAOC,QAAV,K,+uBCAd,MAAMC,EAAUF,IAAOG,IAAV,KAEPC,EAAOJ,IAAOK,GAAV,KAQJC,EAAON,IAAOO,GAAV,KAOJC,EAASR,IAAOS,OAAV,KCJNC,EAAkD,EAAGC,UAASC,sBACvE,MAAMC,EAAaC,sBACf,EAAGC,oBACCH,EAAgBG,EAAcC,aAAa,aAE/C,CAACJ,IAGL,OACI,kBAACV,EAAD,KACI,kBAACE,EAAD,KACKO,EAAQM,IAAI,EAAGC,OAAMC,KAAIC,iBAElB,kBAACd,EAAD,CAAMe,IAAKF,GACP,kBAACX,EAAD,CAAQc,KAAK,SAASC,QAASV,EAAYW,UAASL,GAChD,0BAAMM,KAAK,MAAMC,aAAYN,GACxBF,GAEL,2BAAIE,S,usBC/B7B,MAAMO,EAAQ3B,IAAOG,IAAV,KAIZyB,EAAYC,YAAH,KAQFC,EAAgB9B,IAAOK,GAAV,IACpBuB,GAWOG,EAAe/B,IAAOK,GAAV,IACnBuB,GClBOI,EAAwC,EAAGC,OAAMC,UAASC,MAAKC,QAAOC,wBAE3E,kBAACV,EAAD,KACI,kBAACG,EAAD,KACI,qCAAWG,GACX,wCAAcC,GACd,oCAAUC,IAGd,kBAACJ,EAAD,KACI,sCAAYK,GACZ,kDAAwBC,K,yMClBjC,MAAMC,EAAUtC,IAAOG,IAAV,KCKPoC,EAA4C,EAAGC,aACjD,kBAACF,EAAD,KAAUE,GCDRC,EAA2B,KACpC,MAAOC,EAAUC,GAAeC,mBAAoB,CAAEX,KAAM,EAAGC,QAAS,EAAGC,IAAK,IAI1EC,EAFqBtB,sBAAa+B,GAA0BC,OAAOC,OAAOF,GAAIG,OAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAG,GAAI,GAElGC,CAAmBT,GAQ3BL,EANkCvB,sBACnC+B,GAAD,UACOO,KAAKC,MAAO,IAAMP,OAAOC,OAAOF,GAAIG,OAAO,CAACC,EAAGC,IAAMD,EAAIC,EAAG,GAAML,EAAGZ,OAAS,EADrF,KAEA,GAGuBqB,CAAgCZ,GAErD/B,EAAU4C,kBACZ,IAAM,CACF,CACIrC,KAAM,eACNC,GAAI,OACJC,YAAa,QAEjB,CACIF,KAAM,eACNC,GAAI,UACJC,YAAa,WAEjB,CACIF,KAAM,eACNC,GAAI,MACJC,YAAa,QAGrB,IAGEoC,EAAsB1C,sBACvB2C,IACGd,EAAY,IACLD,EACH,CAACe,GAAWf,EAASe,GAAY,KAGzC,CAACf,EAAUC,IAGf,OACI,kBAAC5C,EAAD,KACI,kBAACW,EAAD,CAAiBC,QAASA,EAASC,gBAAiB4C,IAEnDpB,EACG,kBAACJ,EAAD,CACIC,KAAMS,EAAST,KACfC,QAASQ,EAASR,QAClBC,IAAKO,EAASP,IACdC,MAAOA,EACPC,mBAAoBA,IAGxB,kBAACE,EAAD,CAAcC,QAAQ,wB,65BChE/B,MAAMkB,EAAc1D,IAAO2D,GAAV,KAKXC,EAAc5D,IAAO6D,QAAV,KAEXC,EAAO9D,IAAO+D,KAAV,IAMTH,GAaKI,EAAqBhE,IAAOiE,GAAV,KAKlBC,EAAqBlE,IAAOG,IAAV,IAQb,EAAGgE,QAAiBA,GAAM,WCrC/BC,EAA4B,IAEjC,kBAACR,EAAD,KACI,kBAACI,EAAD,wBAEA,kBAACE,EAAD,CAAoBC,GAAG,kBACnB,kBAAC1B,EAAD,QCNH4B,EAAgB,IAErB,kBAACP,EAAD,KACI,kBAACJ,EAAD,kCACA,kBAACU,EAAD,OCKQE,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCZvCC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAACR,EAAD,OAEJS,SAASC,eAAe,SDwHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,KAAMC,IACHA,EAAaC,eAEhBC,MAAOC,IACJC,QAAQD,MAAMA,EAAM/C,a","file":"static/js/main.7a0ed973.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Feedback = styled.article`\n    --color-big-stone: #122236;\n    --color-big-stone-pale: rgba(18, 34, 54, 0.1);\n    --color-regent-gray: #82909e;\n    --color-mystic: #e4e9f0;\n\n    display: flex;\n    flex-direction: column;\n    width: 320px;\n    padding: 10px;\n    background: white;\n    border-radius: 5px;\n    overflow: hidden;\n    box-shadow: 0 0 3px 0 rgba(0, 0, 0, 0.2);\n    font-family: sans-serif;\n`;\n","import styled from 'styled-components';\n\nexport const Options = styled.div``;\n\nexport const List = styled.ul`\n    display: flex;\n    align-items: center;\n    margin: 0;\n    padding: 0;\n    list-style: none;\n`;\n\nexport const Item = styled.li`\n    display: flex;\n    justify-content: center;\n    flex-grow: 1;\n    flex-basis: 0;\n`;\n\nexport const Option = styled.button`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 0;\n    border: 0;\n    cursor: pointer;\n    background: none;\n\n    span {\n        font-size: 30px;\n    }\n\n    p {\n        margin: 2px 0 0;\n        font-size: 14px;\n    }\n`;\n","import React, { useCallback } from 'react';\nimport { Item, List, Options, Option } from './FeedbackOptions.sc';\nimport { Reactions } from '../_shared/Reactions';\n\nexport type FeedbackOption = {\n    icon: string;\n    id: keyof Reactions;\n    displayName: string;\n};\n\nexport type FeedbackOptionsProps = {\n    options: FeedbackOption[];\n    onLeaveFeedback: (optionId: keyof Reactions) => void;\n};\n\nexport const FeedbackOptions: React.FC<FeedbackOptionsProps> = ({ options, onLeaveFeedback }) => {\n    const handleVote = useCallback(\n        ({ currentTarget }) => {\n            onLeaveFeedback(currentTarget.getAttribute('data-id'));\n        },\n        [onLeaveFeedback],\n    );\n\n    return (\n        <Options>\n            <List>\n                {options.map(({ icon, id, displayName }) => {\n                    return (\n                        <Item key={id}>\n                            <Option type=\"button\" onClick={handleVote} data-id={id}>\n                                <span role=\"img\" aria-label={displayName}>\n                                    {icon}\n                                </span>\n                                <p>{displayName}</p>\n                            </Option>\n                        </Item>\n                    );\n                })}\n            </List>\n        </Options>\n    );\n};\n","import styled, { css } from 'styled-components';\n\nexport const Stats = styled.div`\n    margin-top: 10px;\n`;\n\nconst statsList = css`\n    display: flex;\n    align-items: center;\n    margin: 0;\n    padding: 10px 0 0;\n    list-style: none;\n`;\n\nexport const ConcreteStats = styled.ul`\n    ${statsList};\n\n    text-align: center;\n    border-top: 1px solid var(--color-big-stone-pale);\n\n    li {\n        flex-grow: 1;\n        flex-basis: 0;\n    }\n`;\n\nexport const SummaryStats = styled.ul`\n    ${statsList};\n\n    margin-top: 10px;\n    justify-content: space-around;\n    border-top: 1px dashed var(--color-big-stone-pale);\n`;\n","import React from 'react';\nimport { Stats, SummaryStats, ConcreteStats } from './Statistics.sc';\nimport { Reactions } from '../_shared/Reactions';\n\nexport type StatisticsProps = Reactions & {\n    total: number;\n    positivePercentage: string;\n};\n\nexport const Statistics: React.FC<StatisticsProps> = ({ good, neutral, bad, total, positivePercentage }) => {\n    return (\n        <Stats>\n            <ConcreteStats>\n                <li>Good: {good}</li>\n                <li>Neutral: {neutral}</li>\n                <li>Bad: {bad}</li>\n            </ConcreteStats>\n\n            <SummaryStats>\n                <li>Total: {total}</li>\n                <li>Positive feedback: {positivePercentage}</li>\n            </SummaryStats>\n        </Stats>\n    );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    border-top: 1px solid var(--color-big-stone-pale);\n    text-align: center;\n    margin-top: 10px;\n    padding-top: 10px;\n`;\n","import React from 'react';\nimport { Wrapper } from './Notification.sc';\n\nexport type NotificationProps = {\n    message: string;\n};\n\nexport const Notification: React.FC<NotificationProps> = ({ message }) => {\n    return <Wrapper>{message}</Wrapper>;\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { Feedback } from './FeedbackWidget.sc';\nimport { FeedbackOption, FeedbackOptions } from './FeedbackOptions';\nimport { Statistics } from './Statistics';\nimport { Notification } from './Notification';\nimport { Reactions } from './_shared/Reactions';\n\nexport const FeedbackWidget: React.FC = () => {\n    const [feedback, setFeedback] = useState<Reactions>({ good: 0, neutral: 0, bad: 0 });\n\n    const countTotalFeedback = useCallback((fb: Reactions): number => Object.values(fb).reduce((a, v) => a + v, 0), []);\n\n    const total = countTotalFeedback(feedback);\n\n    const countPositiveFeedbackPercentage = useCallback(\n        (fb: Reactions): string =>\n            `${Math.round((100 / Object.values(fb).reduce((a, v) => a + v, 0)) * fb.good) || 0}%`,\n        [],\n    );\n\n    const positivePercentage = countPositiveFeedbackPercentage(feedback);\n\n    const options = useMemo<FeedbackOption[]>(\n        () => [\n            {\n                icon: '👍',\n                id: 'good',\n                displayName: 'Good',\n            },\n            {\n                icon: '😐',\n                id: 'neutral',\n                displayName: 'Neutral',\n            },\n            {\n                icon: '🤬',\n                id: 'bad',\n                displayName: 'Bad',\n            },\n        ],\n        [],\n    );\n\n    const handleLeaveFeedback = useCallback(\n        (optionId: keyof Reactions) => {\n            setFeedback({\n                ...feedback,\n                [optionId]: feedback[optionId] + 1,\n            });\n        },\n        [feedback, setFeedback],\n    );\n\n    return (\n        <Feedback>\n            <FeedbackOptions options={options} onLeaveFeedback={handleLeaveFeedback} />\n\n            {total ? (\n                <Statistics\n                    good={feedback.good}\n                    neutral={feedback.neutral}\n                    bad={feedback.bad}\n                    total={total}\n                    positivePercentage={positivePercentage}\n                />\n            ) : (\n                <Notification message=\"No feedback given\" />\n            )}\n        </Feedback>\n    );\n};\n","import styled from 'styled-components';\n\nexport const MainHeading = styled.h1`\n    margin: 0;\n    font-size: 24px;\n`;\n\nexport const MainSection = styled.section``;\n\nexport const Main = styled.main`\n    min-width: 400px;\n    max-width: 768px;\n    margin: 0 auto;\n    padding: 60px 20px 60px;\n\n    > ${MainSection} {\n        margin-top: 50px;\n\n        & + & {\n            margin-top: 40px;\n        }\n\n        &:first-child {\n            margin-top: 0;\n        }\n    }\n`;\n\nexport const MainSectionHeading = styled.h2`\n    margin: 0;\n    font-size: 20px;\n`;\n\nexport const MainSectionContent = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-top: 20px;\n    padding: 20px;\n    box-shadow: 0 0 3px 0 rgba(0, 0, 0, 0.2);\n    border-radius: 2px;\n    background: ${({ bg }): string => bg || '#ffffff'};\n`;\n","import React from 'react';\nimport { FeedbackWidget } from './FeedbackWidget';\nimport { MainSection, MainSectionContent, MainSectionHeading } from '../Main.sc';\n\nexport const FeedbackSection: React.FC = () => {\n    return (\n        <MainSection>\n            <MainSectionHeading>Feedback Widget</MainSectionHeading>\n\n            <MainSectionContent bg=\"lightslategray\">\n                <FeedbackWidget />\n            </MainSectionContent>\n        </MainSection>\n    );\n};\n","import React from 'react';\nimport { FeedbackSection } from '../Main/FeedbackSection';\nimport { Main, MainHeading } from '../Main';\n\nexport const App: React.FC = () => {\n    return (\n        <Main>\n            <MainHeading>Homework 02 – Ex. 01</MainHeading>\n            <FeedbackSection />\n        </Main>\n    );\n};\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}